#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('generated:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io
 */

var io = require('socket.io')(server);

/**
 * Returns a random integer between min (inclusive) and max (inclusive)
 * Using Math.round() will give you a non-uniform distribution!
 */
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getRandomColor () {
    var colors = ['primary', 'success', 'info', 'warning', 'danger'];
    return colors[getRandomInt(0, colors.length - 1)];
}

io.on('connection', function(socket){

    /* Connection */

    var data = {
        user: Math.random(),
        color: getRandomColor()
    };

    console.log(data.user, 'connected');

    socket.emit('hi-to-client', {
        data: data,
        msg: 'hi'
    });

    socket.broadcast.emit('hi-to-client', {
        data: data,
        msg: 'connected'
    });

    /* Disconnect */

    socket.on('disconnect', function(){

        console.log(data.user, 'disconnected');

        socket.broadcast.emit('to-client-disconnect', {
            data: data,
            msg: 'disconnected'
        });

    });

    /* Etc. */

    socket.on('client-to-server', function(msg){

        console.log(data.user, 'says', msg);

        socket.emit('server-to-client', {
            data: data,
            msg: msg
        });

        socket.broadcast.emit('server-to-client', {
            data: data,
            msg: msg
        });

    });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
